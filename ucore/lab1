## lab1

### 练习1

>#### 练习1：理解通过make生成执行文件的过程。（要求在报告中写出对下述问题的回答）
>
>列出本实验各练习中对应的OS原理的知识点，并说明本实验中的实现部分如何对应和体现了原理中的基本概念和关键知识点。
>
>在此练习中，大家需要通过静态分析代码来了解：
>
>1. 操作系统镜像文件ucore.img是如何一步一步生成的？(需要比较详细地解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果)
>2. 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？
>
>补充材料：
>
>如何调试Makefile
>
>当执行make时，一般只会显示输出，不会显示make到底执行了哪些命令。
>
>如想了解make执行了哪些命令，可以执行：
>
>```
>$ make "V="
>```
>
>要获取更多有关make的信息，可上网查询，并请执行
>
>```
>$ man make
>```

#### 操作系统镜像文件ucore.img是如何一步一步生成的？

1. 大致了解一下makefile的语法规则

```
target ... : prerequisites ...
	command
	...
	...
```

即生成target依赖所有的prerequisites，command部分是make需要执行的shell命令

makefile提供了系统默认的自动化变量

$^：代表所有依赖文件

$@：代表目标

$<：代表第一个依赖文件

2. linux命令 dd——dd可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出

视频中说开始不必很深入研究makefile，生成ucore.img的过程大概为

- 编译所有生成bin/kernel所需的文件
- 链接生成bin/kernel 
- 编译bootasm.S  bootmain.c  sign.c  
- 根据sign规范生成obj/bootblock.o 
- 生成ucore.img

#### 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？

查看tools/sign.c

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfplbhbshj31bs0aidi9.jpg)

其特征是大小为512字节，第510个（倒数第二个）字节是0x55，第511个（倒数第一个）字节是0xAA。

### 练习2

>#### 练习2：使用qemu执行并调试lab1中的软件。（要求在报告中简要写出练习过程）
>
>为了熟悉使用qemu和gdb进行的调试工作，我们进行如下的小练习：
>
>1. 从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行。
>2. 在初始化位置0x7c00设置实地址断点,测试断点正常。
>3. 从0x7c00开始跟踪代码运行,将单步跟踪反汇编得到的代码与bootasm.S和 bootblock.asm进行比较。
>4. 自己找一个bootloader或内核中的代码位置，设置断点并进行测试。
>
>> 提示：参考附录“启动后第一条执行的指令”，可了解更详细的解释，以及如何单步调试和查看BIOS代码。
>>
>> 提示：查看 labcodes_answer/lab1_result/tools/lab1init 文件，用如下命令试试如何调试bootloader第一条指令：
>>
>> ```
>>  $ cd labcodes_answer/lab1_result/
>>  $ make lab1-mon
>> ```
>
>补充材料： 我们主要通过硬件模拟器qemu来进行各种实验。在实验的过程中我们可能会遇上各种各样的问题，调试是必要的。qemu支持使用gdb进行的强大而方便的调试。所以用好qemu和gdb是完成各种实验的基本要素。
>
>默认的gdb需要进行一些额外的配置才进行qemu的调试任务。qemu和gdb之间使用网络端口1234进行通讯。在打开qemu进行模拟之后，执行gdb并输入
>
>```
>target remote localhost:1234
>```
>
>即可连接qemu，此时qemu会进入停止状态，听从gdb的命令。
>
>另外，我们可能需要qemu在一开始便进入等待模式，则我们不再使用make qemu开始系统的运行，而使用make debug来完成这项工作。这样qemu便不会在gdb尚未连接的时候擅自运行了。
>
>***gdb的地址断点\***
>
>在gdb命令行中，使用b *[地址]便可以在指定内存地址设置断点，当qemu中的cpu执行到指定地址时，便会将控制权交给gdb。
>
>***关于代码的反汇编\***
>
>有可能gdb无法正确获取当前qemu执行的汇编指令，通过如下配置可以在每次gdb命令行前强制反汇编当前的指令，在gdb命令行或配置文件中添加：
>
>```
>define hook-stop
>x/i $pc
>end
>```
>
>即可
>
>***gdb的单步命令\***
>
>在gdb中，有next, nexti, step, stepi等指令来单步调试程序，他们功能各不相同，区别在于单步的“跨度”上。
>
>```
>next 单步到程序源代码的下一行，不进入函数。
>nexti 单步一条机器指令，不进入函数。
>step 单步到下一个不同的源代码行（包括进入函数）。
>stepi 单步一条机器指令。
>```

通过`sudo apt-get install qemu-system`命令安装过qemu后，在terminal输入"qemu"显示command not found

建立软链接`sudo ln -s /usr/bin/qemu-system-i386 /usr/bin/qemu`

创建/tools/gdbinit文件，在里面输入

```
target remote 127.0.0.1:1234
file bin/kernel
```

保存

窗口1运行`qemu -S -s -hda ./bin/ucore.img`

窗口2运行`gdb -x tools/gdbinit`

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfpky3lbyj31d40u0aww.jpg)

0x7c00处反汇编代码

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfpm109a2j30zi0b6jss.jpg)

boot/bootasm.S

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfpo53c2dj31d00cgtc2.jpg)

之后就是正常的gdb使用

### 练习3

>#### 练习3：分析bootloader进入保护模式的过程。（要求在报告中写出分析）
>
>BIOS将通过读取硬盘主引导扇区到内存，并转跳到对应内存中的位置执行bootloader。请分析bootloader是如何完成从实模式进入保护模式的。
>
>提示：需要阅读**小节“保护模式和分段机制”**和lab1/boot/bootasm.S源码，了解如何从实模式切换到保护模式，需要了解：
>
>- 为何开启A20，以及如何开启A20
>- 如何初始化GDT表
>- 如何使能和进入保护模式

在保护模式下使用32位地址线，如果A20恒等于0，那么系统无法有效访问所有可用内存（只能访问奇数兆的内存），所以进入保护模式必须打开A20

由boot/bootasm.S中

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfqan4ikhj31oy0j6444.jpg)

打开A20分为两步

都要先读取0x64端口的第2位，确保输入缓冲区为空后才能进行写操作

seta20.1往端口0x64写数据0xd1，告诉CPU我要往8042芯片的P2端口写数据

seta20.2往端口0x60写数据0xdf，从而将8042芯片的P2端口设置为1

(`inb`指令从端口读数据，`outb`指令向端口写数据)

往下是设置GDT和进入保护模式

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfqlmamcrj31os0bw423.jpg)

`lgdt gdtdesc`将gdtdesc标签处的全局描述符表（gdt）加载到全局描述符表寄存器GDTR中

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfqvmecn4j31iw09wju2.jpg)

之后的指令将cr0寄存器的PE位（cr0寄存器的最低位）设置为1，就进入保护模式了

### 练习4

>#### 练习4：分析bootloader加载ELF格式的OS的过程。（要求在报告中写出分析）
>
>通过阅读bootmain.c，了解bootloader如何加载ELF文件。通过分析源代码和通过qemu来运行并调试bootloader&OS，
>
>- bootloader如何读取硬盘扇区的？
>- bootloader是如何加载ELF格式的OS？
>
>提示：可阅读“硬盘访问概述”，“ELF执行文件格式概述”这两小节。

bootmain主函数函数

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfy3i84qhj31ps0tujxe.jpg)

先通过`readseg ((uintptr_t)ELFHDR, SECTSIZE * 8, 0);`读取磁盘中的内核ELF文件

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfylvhuokj31ne0ko0xd.jpg)

`readsect((void *)va, secno);`用LBA模式的PIO（Program IO）方式来访问硬盘

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfydgaqy6j31oa0iqtcz.jpg)

然后通过判断魔数来判断是不是ELF文件

```
if (ELFHDR->e_magic != ELF_MAGIC) {
        goto bad;
    }

struct proghdr *ph, *eph;
    
ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
eph = ph + ELFHDR->e_phnum;
for (; ph < eph; ph ++) {
    readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
}
((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
```

由ELF Header里面e_phoff字段（用于记录program header table相对于文件头的偏移值）可以找到程序头表的起始地址，程序头表是一个结构体数组，每个元素记录对应segment的信息，再由e_phnum确定Program header table中个条目个数，将所有的段读取到内存中

然后调用elf文件头中定义的入口地址e_entry

内核也就加载完毕了

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghfzqe1eu2j31af0u01i8.jpg)

### 练习5

>#### 练习5：实现函数调用堆栈跟踪函数 （需要编程）
>
>我们需要在lab1中完成kdebug.c中函数print_stackframe的实现，可以通过函数print_stackframe来跟踪函数调用堆栈中记录的返回地址。在如果能够正确实现此函数，可在lab1中执行 “make qemu”后，在qemu模拟器中得到类似如下的输出：
>
>```
>……
>ebp:0x00007b28 eip:0x00100992 args:0x00010094 0x00010094 0x00007b58 0x00100096
>    kern/debug/kdebug.c:305: print_stackframe+22
>ebp:0x00007b38 eip:0x00100c79 args:0x00000000 0x00000000 0x00000000 0x00007ba8
>    kern/debug/kmonitor.c:125: mon_backtrace+10
>ebp:0x00007b58 eip:0x00100096 args:0x00000000 0x00007b80 0xffff0000 0x00007b84
>    kern/init/init.c:48: grade_backtrace2+33
>ebp:0x00007b78 eip:0x001000bf args:0x00000000 0xffff0000 0x00007ba4 0x00000029
>    kern/init/init.c:53: grade_backtrace1+38
>ebp:0x00007b98 eip:0x001000dd args:0x00000000 0x00100000 0xffff0000 0x0000001d
>    kern/init/init.c:58: grade_backtrace0+23
>ebp:0x00007bb8 eip:0x00100102 args:0x0010353c 0x00103520 0x00001308 0x00000000
>    kern/init/init.c:63: grade_backtrace+34
>ebp:0x00007be8 eip:0x00100059 args:0x00000000 0x00000000 0x00000000 0x00007c53
>    kern/init/init.c:28: kern_init+88
>ebp:0x00007bf8 eip:0x00007d73 args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8
><unknow>: -- 0x00007d72 –
>……
>```
>
>请完成实验，看看输出是否与上述显示大致一致，并解释最后一行各个数值的含义。
>
>提示：可阅读小节“函数堆栈”，了解编译器如何建立函数调用关系的。在完成lab1编译后，查看lab1/obj/bootblock.asm，了解bootloader源码与机器码的语句和地址等的对应关系；查看lab1/obj/kernel.asm，了解 ucore OS源码与机器码的语句和地址等的对应关系。
>
>要求完成函数kern/debug/kdebug.c::print_stackframe的实现，提交改进后源代码包（可以编译执行），并在实验报告中简要说明实现过程，并写出对上述问题的回答。
>
>补充材料：
>
>由于显示完整的栈结构需要解析内核文件中的调试符号，较为复杂和繁琐。代码中有一些辅助函数可以使用。例如可以通过调用print_debuginfo函数完成查找对应函数名并打印至屏幕的功能。具体可以参见kdebug.c代码中的注释。

补充print_stackframe函数

```
void
print_stackframe(void) {
     /* LAB1 YOUR CODE : STEP 1 */
     /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
      * (2) call read_eip() to get the value of eip. the type is (uint32_t);
      * (3) from 0 .. STACKFRAME_DEPTH
      *    (3.1) printf value of ebp, eip
      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (uint32_t)ebp +2 [0..4]
      *    (3.3) cprintf("\n");
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp,eip;
    ebp = read_ebp();
    eip = read_eip();
    for(int i = 0; i < STACKFRAME_DEPTH && ebp != 0; i++){
        cprintf("ebp:0x%08x eip:0x%08x args:0x%08x 0x%08x 0x%08x 0x%08x\n", ebp, eip, *(uint32_t*)(ebp + 2), *(uint32_t*)(ebp + 3), *(uint32_t*)(ebp + 4), *(uint32_t*)(ebp + 5));
        print_debuginfo(eip-1);
        eip = *((uint32_t *)ebp+1);	//指向上一个函数的eip
        ebp = *((uint32_t *)ebp);		//指向上一个函数的ebp
    }
}
```

运行结果

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghg2z5qzcoj31440mc40r.jpg)

### 练习6

>#### 练习6：完善中断初始化和处理 （需要编程）
>
>请完成编码工作和回答如下问题：
>
>1. 中断描述符表（也可简称为保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码的入口？
>2. 请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，依次对所有中断入口进行初始化。使用mmu.h中的SETGATE宏，填充idt数组内容。每个中断的入口由tools/vectors.c生成，使用trap.c中声明的vectors数组即可。
>3. 请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用print_ticks子程序，向屏幕上打印一行文字”100 ticks”。
>
>> 【注意】除了系统调用中断(T_SYSCALL)使用陷阱门描述符且权限为用户态权限以外，其它中断均使用特权级(DPL)为０的中断门描述符，权限为内核态权限；而ucore的应用程序处于特权级３，需要采用｀int 0x80`指令操作（这种方式称为软中断，软件中断，Tra中断，在lab5会碰到）来发出系统调用请求，并要能实现从特权级３到特权级０的转换，所以系统调用中断(T_SYSCALL)所对应的中断门描述符中的特权级（DPL）需要设置为３。
>
>要求完成问题2和问题3 提出的相关函数实现，提交改进后的源代码包（可以编译执行），并在实验报告中简要说明实现过程，并写出对问题1的回答。完成这问题2和3要求的部分代码后，运行整个系统，可以看到大约每1秒会输出一次”100 ticks”，而按下的键也会在屏幕上显示。
>
>提示：可阅读小节“中断与异常”。

1. 中断描述符表每个表项8字节（如下图），通过执行`int N`使cpu跳转到操作系统给出的编号为N的中断服务程序

    ![](https://tva1.sinaimg.cn/large/007S8ZIlgy1ghccmh02hnj30e60cwwei.jpg)

    对于中断门，第16到31位为中断例程的段选择子，第0到15位 和 第48到63位分别为偏移量的地位和高位

2. 在mmu.h中找到SETGATE宏

```
#define SETGATE(gate, istrap, sel, off, dpl) {            \
    (gate).gd_off_15_0 = (uint32_t)(off) & 0xffff;        \
    (gate).gd_ss = (sel);                                \
    (gate).gd_args = 0;                                    \
    (gate).gd_rsv1 = 0;                                    \
    (gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;    \
    (gate).gd_s = 0;                                    \
    (gate).gd_dpl = (dpl);                                \
    (gate).gd_p = 1;                                    \
    (gate).gd_off_31_16 = (uint32_t)(off) >> 16;        \
}
```

还有一些已有的宏定义

```
//kern/mm/mmu.h
#define STS_IG32        0xE            // 32-bit Interrupt Gate
#define STS_TG32        0xF            // 32-bit Trap Gate

//kern/mm/memlayout.h
#define SEG_KTEXT    1

#define GD_KTEXT    ((SEG_KTEXT) << 3)        // kernel text

#define DPL_KERNEL    (0)
#define DPL_USER    (3)

#define KERNEL_CS    ((GD_KTEXT) | DPL_KERNEL)

//kern/trap/trap.h
#define T_SWITCH_TOK                121    // user/kernel switch
```

补充idt_init函数

```
void
idt_init(void) {
     /* LAB1 YOUR CODE : STEP 2 */
     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
      
    extern uintptr_t __vectors[];
    for(int i = 0; i < 256; i++){
        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
    }
    //设置系统调用中断(T_SYSCALL)的陷阱门描述符
    SETGATE(idt[T_SYSCALL],1,KERNEL_CS,__vectors[T_SYSCALL],DPL_USER);
    /*	这里lidt的参数为&idt_pd
     *	由文件开头定义
     *	static struct pseudodesc idt_pd = {
     *		sizeof(idt) - 1, (uintptr_t)idt
		 *	};
		 *	得到
		 */
    lidt(&idt_pd);
}
```

3. 使用全局变量tick，补充中断处理函数trap的对时钟中断进行处理的部分

```c
static uint16_t tick = 0;
/* trap_dispatch - dispatch based on what type of trap occurred */
static void
trap_dispatch(struct trapframe *tf) {
    char c;

    switch (tf->tf_trapno) {
    case IRQ_OFFSET + IRQ_TIMER:
        /* LAB1 YOUR CODE : STEP 3 */
        /* handle the timer interrupt */
        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
         * (3) Too Simple? Yes, I think so!
         */
        if(tick == TICK_NUM){
            print_ticks();
            tick = 0;
        }
        tick++;
        break;
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
        cprintf("serial [%03d] %c\n", c, c);
        break;
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
        cprintf("kbd [%03d] %c\n", c, c);
        break;
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        // in kernel, it must be a mistake
        if ((tf->tf_cs & 3) == 0) {
            print_trapframe(tf);
            panic("unexpected trap in kernel.\n");
        }
    }
}
```

